/*
 * This file is generated by jOOQ.
 */

package edu.java.domain.jooq.tables.records;

import edu.java.domain.jooq.enums.BaseUrlType;
import edu.java.domain.jooq.tables.Links;
import jakarta.validation.constraints.Size;
import java.beans.ConstructorProperties;
import java.time.OffsetDateTime;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class LinksRecord extends UpdatableRecordImpl<LinksRecord>
    implements Record6<Long, String, OffsetDateTime, OffsetDateTime, BaseUrlType, JSON> {

    private static final long serialVersionUID = 1L;

    /**
     * Create a detached LinksRecord
     */
    public LinksRecord() {
        super(Links.LINKS);
    }

    /**
     * Create a detached, initialised LinksRecord
     */
    @ConstructorProperties({"linkId", "url", "lastUpdate", "lastCheck", "baseUrl", "info"})
    public LinksRecord(
        @Nullable Long linkId,
        @NotNull String url,
        @Nullable OffsetDateTime lastUpdate,
        @Nullable OffsetDateTime lastCheck,
        @NotNull BaseUrlType baseUrl,
        @NotNull JSON info
    ) {
        super(Links.LINKS);

        setLinkId(linkId);
        setUrl(url);
        setLastUpdate(lastUpdate);
        setLastCheck(lastCheck);
        setBaseUrl(baseUrl);
        setInfo(info);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised LinksRecord
     */
    public LinksRecord(edu.java.domain.jooq.tables.pojos.Links value) {
        super(Links.LINKS);

        if (value != null) {
            setLinkId(value.getLinkId());
            setUrl(value.getUrl());
            setLastUpdate(value.getLastUpdate());
            setLastCheck(value.getLastCheck());
            setBaseUrl(value.getBaseUrl());
            setInfo(value.getInfo());
            resetChangedOnNotNull();
        }
    }

    /**
     * Getter for <code>LINKS.LINK_ID</code>.
     */
    @Nullable
    public Long getLinkId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>LINKS.LINK_ID</code>.
     */
    public void setLinkId(@Nullable Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>LINKS.URL</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 2048)
    @NotNull
    public String getUrl() {
        return (String) get(1);
    }

    /**
     * Setter for <code>LINKS.URL</code>.
     */
    public void setUrl(@NotNull String value) {
        set(1, value);
    }

    /**
     * Getter for <code>LINKS.LAST_UPDATE</code>.
     */
    @Nullable
    public OffsetDateTime getLastUpdate() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>LINKS.LAST_UPDATE</code>.
     */
    public void setLastUpdate(@Nullable OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>LINKS.LAST_CHECK</code>.
     */
    @Nullable
    public OffsetDateTime getLastCheck() {
        return (OffsetDateTime) get(3);
    }

    /**
     * Setter for <code>LINKS.LAST_CHECK</code>.
     */
    public void setLastCheck(@Nullable OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>LINKS.BASE_URL</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public BaseUrlType getBaseUrl() {
        return (BaseUrlType) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * Setter for <code>LINKS.BASE_URL</code>.
     */
    public void setBaseUrl(@NotNull BaseUrlType value) {
        set(4, value);
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    /**
     * Getter for <code>LINKS.INFO</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public JSON getInfo() {
        return (JSON) get(5);
    }

    /**
     * Setter for <code>LINKS.INFO</code>.
     */
    public void setInfo(@NotNull JSON value) {
        set(5, value);
    }

    @Override
    @NotNull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    @Override
    @NotNull
    public Row6<Long, String, OffsetDateTime, OffsetDateTime, BaseUrlType, JSON> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row6<Long, String, OffsetDateTime, OffsetDateTime, BaseUrlType, JSON> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Long> field1() {
        return Links.LINKS.LINK_ID;
    }

    @Override
    @NotNull
    public Field<String> field2() {
        return Links.LINKS.URL;
    }

    @Override
    @NotNull
    public Field<OffsetDateTime> field3() {
        return Links.LINKS.LAST_UPDATE;
    }

    @Override
    @NotNull
    public Field<OffsetDateTime> field4() {
        return Links.LINKS.LAST_CHECK;
    }

    @Override
    @NotNull
    public Field<BaseUrlType> field5() {
        return Links.LINKS.BASE_URL;
    }

    @Override
    @NotNull
    public Field<JSON> field6() {
        return Links.LINKS.INFO;
    }

    @Override
    @Nullable
    public Long component1() {
        return getLinkId();
    }

    @Override
    @NotNull
    public String component2() {
        return getUrl();
    }

    @Override
    @Nullable
    public OffsetDateTime component3() {
        return getLastUpdate();
    }

    @Override
    @Nullable
    public OffsetDateTime component4() {
        return getLastCheck();
    }

    @Override
    @NotNull
    public BaseUrlType component5() {
        return getBaseUrl();
    }

    @Override
    @NotNull
    public JSON component6() {
        return getInfo();
    }

    @Override
    @Nullable
    public Long value1() {
        return getLinkId();
    }

    @Override
    @NotNull
    public String value2() {
        return getUrl();
    }

    @Override
    @Nullable
    public OffsetDateTime value3() {
        return getLastUpdate();
    }

    @Override
    @Nullable
    public OffsetDateTime value4() {
        return getLastCheck();
    }

    @Override
    @NotNull
    public BaseUrlType value5() {
        return getBaseUrl();
    }

    @Override
    @NotNull
    public JSON value6() {
        return getInfo();
    }

    @Override
    @NotNull
    public LinksRecord value1(@Nullable Long value) {
        setLinkId(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value2(@NotNull String value) {
        setUrl(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value3(@Nullable OffsetDateTime value) {
        setLastUpdate(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value4(@Nullable OffsetDateTime value) {
        setLastCheck(value);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public LinksRecord value5(@NotNull BaseUrlType value) {
        setBaseUrl(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord value6(@NotNull JSON value) {
        setInfo(value);
        return this;
    }

    @Override
    @NotNull
    public LinksRecord values(
        @Nullable Long value1,
        @NotNull String value2,
        @Nullable OffsetDateTime value3,
        @Nullable OffsetDateTime value4,
        @NotNull BaseUrlType value5,
        @NotNull JSON value6
    ) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }
}
